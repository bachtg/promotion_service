// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.13.0
// source: api.proto

package promotion_service_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LoyaltyService_GetListEvents_FullMethodName = "/promotion_service.api.LoyaltyService/GetListEvents"
	LoyaltyService_CreateEvent_FullMethodName   = "/promotion_service.api.LoyaltyService/CreateEvent"
	LoyaltyService_GrantPoints_FullMethodName   = "/promotion_service.api.LoyaltyService/GrantPoints"
	LoyaltyService_RedeemVoucher_FullMethodName = "/promotion_service.api.LoyaltyService/RedeemVoucher"
)

// LoyaltyServiceClient is the client API for LoyaltyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoyaltyServiceClient interface {
	GetListEvents(ctx context.Context, in *GetListEventsRequest, opts ...grpc.CallOption) (*GetListEventsResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	GrantPoints(ctx context.Context, in *GrantPointsRequest, opts ...grpc.CallOption) (*GrantPointsResponse, error)
	RedeemVoucher(ctx context.Context, in *RedeemVouchersRequest, opts ...grpc.CallOption) (*RedeemVouchersResponse, error)
}

type loyaltyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoyaltyServiceClient(cc grpc.ClientConnInterface) LoyaltyServiceClient {
	return &loyaltyServiceClient{cc}
}

func (c *loyaltyServiceClient) GetListEvents(ctx context.Context, in *GetListEventsRequest, opts ...grpc.CallOption) (*GetListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListEventsResponse)
	err := c.cc.Invoke(ctx, LoyaltyService_GetListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, LoyaltyService_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) GrantPoints(ctx context.Context, in *GrantPointsRequest, opts ...grpc.CallOption) (*GrantPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantPointsResponse)
	err := c.cc.Invoke(ctx, LoyaltyService_GrantPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loyaltyServiceClient) RedeemVoucher(ctx context.Context, in *RedeemVouchersRequest, opts ...grpc.CallOption) (*RedeemVouchersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemVouchersResponse)
	err := c.cc.Invoke(ctx, LoyaltyService_RedeemVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoyaltyServiceServer is the server API for LoyaltyService service.
// All implementations must embed UnimplementedLoyaltyServiceServer
// for forward compatibility
type LoyaltyServiceServer interface {
	GetListEvents(context.Context, *GetListEventsRequest) (*GetListEventsResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	GrantPoints(context.Context, *GrantPointsRequest) (*GrantPointsResponse, error)
	RedeemVoucher(context.Context, *RedeemVouchersRequest) (*RedeemVouchersResponse, error)
	mustEmbedUnimplementedLoyaltyServiceServer()
}

// UnimplementedLoyaltyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoyaltyServiceServer struct {
}

func (UnimplementedLoyaltyServiceServer) GetListEvents(context.Context, *GetListEventsRequest) (*GetListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListEvents not implemented")
}
func (UnimplementedLoyaltyServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedLoyaltyServiceServer) GrantPoints(context.Context, *GrantPointsRequest) (*GrantPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPoints not implemented")
}
func (UnimplementedLoyaltyServiceServer) RedeemVoucher(context.Context, *RedeemVouchersRequest) (*RedeemVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemVoucher not implemented")
}
func (UnimplementedLoyaltyServiceServer) mustEmbedUnimplementedLoyaltyServiceServer() {}

// UnsafeLoyaltyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoyaltyServiceServer will
// result in compilation errors.
type UnsafeLoyaltyServiceServer interface {
	mustEmbedUnimplementedLoyaltyServiceServer()
}

func RegisterLoyaltyServiceServer(s grpc.ServiceRegistrar, srv LoyaltyServiceServer) {
	s.RegisterService(&LoyaltyService_ServiceDesc, srv)
}

func _LoyaltyService_GetListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GetListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyService_GetListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GetListEvents(ctx, req.(*GetListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_GrantPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).GrantPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyService_GrantPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).GrantPoints(ctx, req.(*GrantPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoyaltyService_RedeemVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoyaltyServiceServer).RedeemVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoyaltyService_RedeemVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoyaltyServiceServer).RedeemVoucher(ctx, req.(*RedeemVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoyaltyService_ServiceDesc is the grpc.ServiceDesc for LoyaltyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoyaltyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promotion_service.api.LoyaltyService",
	HandlerType: (*LoyaltyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListEvents",
			Handler:    _LoyaltyService_GetListEvents_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _LoyaltyService_CreateEvent_Handler,
		},
		{
			MethodName: "GrantPoints",
			Handler:    _LoyaltyService_GrantPoints_Handler,
		},
		{
			MethodName: "RedeemVoucher",
			Handler:    _LoyaltyService_RedeemVoucher_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
