// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package promotion_service_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for VouchersQuantity

	// no validation rules for FromDate

	// no validation rules for ToDate

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on Voucher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Voucher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Voucher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VoucherMultiError, or nil if none found.
func (m *Voucher) ValidateAll() error {
	return m.validate(true)
}

func (m *Voucher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Price

	// no validation rules for Currency

	// no validation rules for Status

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return VoucherMultiError(errors)
	}

	return nil
}

// VoucherMultiError is an error wrapping multiple validation errors returned
// by Voucher.ValidateAll() if the designated constraints aren't met.
type VoucherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VoucherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VoucherMultiError) AllErrors() []error { return m }

// VoucherValidationError is the validation error returned by Voucher.Validate
// if the designated constraints aren't met.
type VoucherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoucherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoucherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoucherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoucherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoucherValidationError) ErrorName() string { return "VoucherValidationError" }

// Error satisfies the builtin error interface
func (e VoucherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoucher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoucherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoucherValidationError{}

// Validate checks the field values on GetListEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListEventsRequestMultiError, or nil if none found.
func (m *GetListEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PartnerId

	// no validation rules for Name

	// no validation rules for FromDate

	// no validation rules for ToDate

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetListEventsRequestMultiError(errors)
	}

	return nil
}

// GetListEventsRequestMultiError is an error wrapping multiple validation
// errors returned by GetListEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListEventsRequestMultiError) AllErrors() []error { return m }

// GetListEventsRequestValidationError is the validation error returned by
// GetListEventsRequest.Validate if the designated constraints aren't met.
type GetListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListEventsRequestValidationError) ErrorName() string {
	return "GetListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListEventsRequestValidationError{}

// Validate checks the field values on GetListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListEventsResponseMultiError, or nil if none found.
func (m *GetListEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListEventsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListEventsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListEventsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetListEventsResponseMultiError(errors)
	}

	return nil
}

// GetListEventsResponseMultiError is an error wrapping multiple validation
// errors returned by GetListEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListEventsResponseMultiError) AllErrors() []error { return m }

// GetListEventsResponseValidationError is the validation error returned by
// GetListEventsResponse.Validate if the designated constraints aren't met.
type GetListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListEventsResponseValidationError) ErrorName() string {
	return "GetListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListEventsResponseValidationError{}

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequestMultiError, or nil if none found.
func (m *CreateEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for VouchersQuantity

	// no validation rules for FromDate

	// no validation rules for ToDate

	// no validation rules for PartnerId

	if len(errors) > 0 {
		return CreateEventRequestMultiError(errors)
	}

	return nil
}

// CreateEventRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEventRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequestMultiError) AllErrors() []error { return m }

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

// Validate checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventResponseMultiError, or nil if none found.
func (m *CreateEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEventResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEventResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEventResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEventResponseMultiError(errors)
	}

	return nil
}

// CreateEventResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEventResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventResponseMultiError) AllErrors() []error { return m }

// CreateEventResponseValidationError is the validation error returned by
// CreateEventResponse.Validate if the designated constraints aren't met.
type CreateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventResponseValidationError) ErrorName() string {
	return "CreateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventResponseValidationError{}

// Validate checks the field values on GrantPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantPointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantPointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantPointsRequestMultiError, or nil if none found.
func (m *GrantPointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantPointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for EventId

	// no validation rules for GameId

	// no validation rules for Points

	if len(errors) > 0 {
		return GrantPointsRequestMultiError(errors)
	}

	return nil
}

// GrantPointsRequestMultiError is an error wrapping multiple validation errors
// returned by GrantPointsRequest.ValidateAll() if the designated constraints
// aren't met.
type GrantPointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantPointsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantPointsRequestMultiError) AllErrors() []error { return m }

// GrantPointsRequestValidationError is the validation error returned by
// GrantPointsRequest.Validate if the designated constraints aren't met.
type GrantPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantPointsRequestValidationError) ErrorName() string {
	return "GrantPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantPointsRequestValidationError{}

// Validate checks the field values on GrantPointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantPointsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantPointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantPointsResponseMultiError, or nil if none found.
func (m *GrantPointsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantPointsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return GrantPointsResponseMultiError(errors)
	}

	return nil
}

// GrantPointsResponseMultiError is an error wrapping multiple validation
// errors returned by GrantPointsResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantPointsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantPointsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantPointsResponseMultiError) AllErrors() []error { return m }

// GrantPointsResponseValidationError is the validation error returned by
// GrantPointsResponse.Validate if the designated constraints aren't met.
type GrantPointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantPointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantPointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantPointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantPointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantPointsResponseValidationError) ErrorName() string {
	return "GrantPointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantPointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantPointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantPointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantPointsResponseValidationError{}

// Validate checks the field values on RedeemVouchersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedeemVouchersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedeemVouchersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedeemVouchersRequestMultiError, or nil if none found.
func (m *RedeemVouchersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedeemVouchersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for EventId

	// no validation rules for GameId

	// no validation rules for Points

	if len(errors) > 0 {
		return RedeemVouchersRequestMultiError(errors)
	}

	return nil
}

// RedeemVouchersRequestMultiError is an error wrapping multiple validation
// errors returned by RedeemVouchersRequest.ValidateAll() if the designated
// constraints aren't met.
type RedeemVouchersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedeemVouchersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedeemVouchersRequestMultiError) AllErrors() []error { return m }

// RedeemVouchersRequestValidationError is the validation error returned by
// RedeemVouchersRequest.Validate if the designated constraints aren't met.
type RedeemVouchersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedeemVouchersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedeemVouchersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedeemVouchersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedeemVouchersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedeemVouchersRequestValidationError) ErrorName() string {
	return "RedeemVouchersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RedeemVouchersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedeemVouchersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedeemVouchersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedeemVouchersRequestValidationError{}

// Validate checks the field values on RedeemVouchersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedeemVouchersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedeemVouchersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedeemVouchersResponseMultiError, or nil if none found.
func (m *RedeemVouchersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RedeemVouchersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RedeemVouchersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RedeemVouchersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedeemVouchersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RedeemVouchersResponseMultiError(errors)
	}

	return nil
}

// RedeemVouchersResponseMultiError is an error wrapping multiple validation
// errors returned by RedeemVouchersResponse.ValidateAll() if the designated
// constraints aren't met.
type RedeemVouchersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedeemVouchersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedeemVouchersResponseMultiError) AllErrors() []error { return m }

// RedeemVouchersResponseValidationError is the validation error returned by
// RedeemVouchersResponse.Validate if the designated constraints aren't met.
type RedeemVouchersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedeemVouchersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedeemVouchersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedeemVouchersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedeemVouchersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedeemVouchersResponseValidationError) ErrorName() string {
	return "RedeemVouchersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RedeemVouchersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedeemVouchersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedeemVouchersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedeemVouchersResponseValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on GetListEventsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListEventsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListEventsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListEventsResponse_DataMultiError, or nil if none found.
func (m *GetListEventsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListEventsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalRecords

	// no validation rules for PageSize

	// no validation rules for CurrentPage

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListEventsResponse_DataValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListEventsResponse_DataValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListEventsResponse_DataValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListEventsResponse_DataMultiError(errors)
	}

	return nil
}

// GetListEventsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetListEventsResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetListEventsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListEventsResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListEventsResponse_DataMultiError) AllErrors() []error { return m }

// GetListEventsResponse_DataValidationError is the validation error returned
// by GetListEventsResponse_Data.Validate if the designated constraints aren't met.
type GetListEventsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListEventsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListEventsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListEventsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListEventsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListEventsResponse_DataValidationError) ErrorName() string {
	return "GetListEventsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetListEventsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListEventsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListEventsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListEventsResponse_DataValidationError{}
